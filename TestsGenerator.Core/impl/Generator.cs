using System.Security.Principal;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsGenerator.Core.impl;

public class Generator : IGenerator
{
    public async Task<string> GenerateAsync(string sourceCode)
    {
        var parsedCode = CSharpSyntaxTree.ParseText(sourceCode);

        var root = parsedCode.GetCompilationUnitRoot();

        var parsedTestCode = SyntaxFactory.CompilationUnit();

        var namespaceDeclaration = (NamespaceDeclarationSyntax)root.Members[0];

        foreach (var classDeclaration in namespaceDeclaration.Members.Cast<ClassDeclarationSyntax?>())
        {
            ClassDeclarationSyntax testClass;

            parsedTestCode =
                CreateCompilationUnit(classDeclaration.Identifier.Text, namespaceDeclaration.Name, out testClass);

            foreach (var methodDeclaration in classDeclaration.Members.Cast<MethodDeclarationSyntax?>())
            {
                testClass.Members.Add(await CreateTestMethodAsync(methodDeclaration));
            }
        }

        return parsedTestCode.GetText().ToString();
    }

    private static async Task<MethodDeclarationSyntax> CreateTestMethodAsync(MethodDeclarationSyntax m)
    {
        return await Task.Run(() => CreateTestMethod(m.Identifier.Text));
    }

    private static MethodDeclarationSyntax CreateTestMethod(string sourceName)
    {
        return SyntaxFactory.MethodDeclaration(
                SyntaxFactory.PredefinedType(
                    SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
                SyntaxFactory.Identifier($"{sourceName}Test"))
            .WithAttributeLists(
                SyntaxFactory.SingletonList(
                    SyntaxFactory.AttributeList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Attribute(
                                SyntaxFactory.IdentifierName("Test"))))))
            .WithModifiers(
                SyntaxFactory.TokenList(
                    SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
            .WithBody(
                SyntaxFactory.Block(
                    SyntaxFactory.SingletonList<StatementSyntax>(
                        SyntaxFactory.ExpressionStatement(
                            SyntaxFactory.InvocationExpression(
                                    SyntaxFactory.MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        SyntaxFactory.IdentifierName("Assert"),
                                        SyntaxFactory.IdentifierName("Fail")))
                                .WithArgumentList(
                                    SyntaxFactory.ArgumentList(
                                        SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.LiteralExpression(
                                                    SyntaxKind.StringLiteralExpression,
                                                    SyntaxFactory.Literal("autogenerated"))))))))));
    }

    private static CompilationUnitSyntax CreateCompilationUnit(string sourceClassName, NameSyntax usingName,
        out ClassDeclarationSyntax testClass)
    {
        testClass = SyntaxFactory.ClassDeclaration($"{sourceClassName}Tests")
            .WithModifiers(
                SyntaxFactory.TokenList(
                    SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
            .WithMembers(
                SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                    SyntaxFactory.MethodDeclaration(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
                            SyntaxFactory.Identifier("Setup"))
                        .WithAttributeLists(
                            SyntaxFactory.SingletonList(
                                SyntaxFactory.AttributeList(
                                    SyntaxFactory.SingletonSeparatedList(
                                        SyntaxFactory.Attribute(
                                            SyntaxFactory.IdentifierName("SetUp"))))))
                        .WithModifiers(
                            SyntaxFactory.TokenList(
                                SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                        .WithBody(SyntaxFactory.Block())));

        return SyntaxFactory.CompilationUnit()
            .WithUsings(
                SyntaxFactory.List(
                    new[]
                    {
                        SyntaxFactory.UsingDirective(
                            SyntaxFactory.QualifiedName(
                                SyntaxFactory.IdentifierName("NUnit"),
                                SyntaxFactory.IdentifierName("Framework"))),
                        SyntaxFactory.UsingDirective(usingName)
                    }))
            .WithMembers(
                SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                    SyntaxFactory.NamespaceDeclaration(
                            SyntaxFactory.QualifiedName(usingName, SyntaxFactory.IdentifierName("Tests")))
                        .WithMembers(
                            SyntaxFactory.SingletonList<MemberDeclarationSyntax>(testClass))))
            .NormalizeWhitespace();
    }
}